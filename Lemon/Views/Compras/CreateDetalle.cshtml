@model IEnumerable<Lemon.Models.Producto>
<link rel="stylesheet" href="~/css/tablas.css">
<link rel="stylesheet" href="~/css/Compras/agregarDetalle.css">
<style>
    #nav-item4 {
        background: #27e83b;
    }

</style>

@{
    ViewData["Title"] = "CreateDetalle";
}
<header class="col-12 mt-1" style="overflow-x:auto;">
    <div class="infoProducto border d-flex align-items-center ms-2 me-2" style="height:100px; min-width:1100px; border-radius:10px; font-size:20px;">

        <div>
            <button type="button" class="btn btn-secondary ms-5" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                Buscar producto
            </button>
        </div>

        <div class="form-group ms-5 text-center">
            <label class="control-label">IdProducto</label>
            <input id="inputIdProducto" class="form-control" disabled />
        </div>
        <div class="form-group ms-5 text-center">
            <label class="control-label">Nombre</label>
            <input id="inputNombre" class="form-control" disabled />
        </div>
        <div class="form-group ms-5 text-center">
            <label class="control-label">Costo</label>
            <input id="inputCosto" type="text" class="form-control" />
        </div>
        <div class="form-group ms-5 text-center">
            <label class="control-label">Cantidad Stock</label>
            <input id="inputCantidadD" type="text"  class="form-control" disabled />
        </div>


        <div class="form-group ms-5 text-center">
            <label class="control-label">Cantidad comprada</label>
            <input id="inputCantidadC" type="text" class="form-control" />
        </div>

        <div>
            <button id="btnAgregar" type="button" class="btn btn-success ms-5 me-5 ">
                Agregar
            </button>
        </div>
    </div>
</header>

<article class="col-12 mt-3" style="overflow-x:auto; background:white;">
    <div id="productosAgregados" class="mt-2 border border-color-black ms-2 me-2" style="border-radius:10px; min-width:600px;  font-size:20px; height:300px; max-height:300px; overflow-y:auto;">
        <div class="d-flex justify-content-between textos">
            <h3 class="ms-5">Productos Comprados</h3>
            <h3 id="totalVenta" class="me-5">Total: $0</h3>
        </div>
        <table id="tablaProductos" class="mt-2 mb-2 col-12">
            <thead>
                <tr style="border:0; background:#ebebeb;">
                    <th>IdProducto</th>
                    <th>Nombre</th>
                    <th>Costo</th>
                    <th>Cantidad Comprada</th>
                    <th>Subtotal</th>
                    <th>Accion</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var detalles = ViewData["detalles"] as List<Producto>;
                    if (detalles != null)
                    {
                        foreach (var detalle in detalles)
                        {
                            <tr data-id="@detalle.IdProducto" class="filaProducto">
                                <td>@detalle.IdProducto</td>
                                <td>@detalle.Nombre</td>
                                <td>@detalle.Costo</td>
                                <td>@detalle.Cantidad</td>
                                <td>$@(string.Format("{0:0.00}", detalle.Costo * detalle.Cantidad))</td>
                                <td><button class="btn btn-danger">Eliminar</button></td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
    <footer class="col-12  d-flex justify-content-end" style="overflow-x:auto; background:white; min-width:600px;">
        <button onclick="validarCancelar()" class="btn btn-danger mt-2 me-5">Cancelar</button>

        <button onclick="validarAgregarDetalles()" class="btn btn-success mt-2 me-5">Guardar detalles</button>
    </footer>
</article>
<!-- Modal -->
<div class="modal fade col-12" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Buscar producto</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div class="col-8">
                    <div class="input-group">
                        <input type="text" class="form-control" id="searchInput" placeholder="Buscar Proveedor" aria-label="Search" aria-describedby="button-addon2">
                        <button class="btn btn-outline-secondary" type="button" id="button-addon2"><i class="fa-solid fa-magnifying-glass fa-2xl" style="color: gray; font-size:30px;"></i></button>
                    </div>
                </div>


                <div class="bodyCompras col-lg-12 col-12 mt-5" style="background:white; overflow-x:auto; ">
                    <div class="table">
                        <table id="productosTable" class="tablaDeDatos col-12">
                            <thead>
                                <tr>
                                    <th>IdProducto</th>
                                    <th>Nombre</th>
                                    <th>Cantidad</th>
                                    <th>Costo</th>
                                    <th>Accion</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.IdProducto)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Nombre)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Cantidad)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(modelItem => item.Costo)
                                        </td>
                                        <td>
                                            <button class="btn btn-primary btn-seleccionar">Seleccionar</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>
<script>
    function validarAgregarDetalles() {
        if (productosAgregados.size === 0) {
            alert("No tienes productos para realizar una compra")
            return
        }
        window.location.href = '/Compras/Create';
    }
    function validarCancelar() {
        window.location.href = '/Compras/Index';
    }

    /*Buscador en tiempo real */
    $(document).ready(function () {
        $('#searchInput').on('input', function () {
            var searchText = $(this).val().toLowerCase();
            $('#productosTable tbody tr').each(function () {
                var nombre = $(this).find('td:eq(1)').text().toLowerCase();
                var cantidad = $(this).find('td:eq(2)').text().toLowerCase();
                var descripcion = $(this).find('td:eq(3)').text().toLowerCase();


                if (nombre.includes(searchText) || cantidad.includes(searchText) || descripcion.includes(searchText)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });
    });

    var botonesSeleccionar = document.querySelectorAll('.btn-seleccionar');
    botonesSeleccionar.forEach(function (boton) {
        boton.addEventListener('click', function () {
            // Obtener la fila actual del producto
            var fila = this.closest('tr');
            // Obtener los valores de la fila actual
            var idProducto = fila.cells[0].innerText;
            var nombre = fila.cells[1].innerText;
            var cantidad = fila.cells[2].innerText.replace(',', '.');
            var descripcion = fila.cells[3].innerText;
            var costo = fila.cells[4].innerText.replace(',', '.');
            // Asignar los valores a los inputs en infoProducto
            document.getElementById('inputIdProducto').value = idProducto;
            document.getElementById('inputNombre').value = nombre;
            document.getElementById('inputCosto').value = costo;
            document.getElementById('inputCantidadD').value = cantidad;
            // Cerrar el modal
            var modal = document.getElementById('staticBackdrop');
            var modalBootstrap = bootstrap.Modal.getInstance(modal);
            modalBootstrap.hide();
        });
    });

    var productosAgregados = new Set();
    var totalCompra = 0;
    function actualizarTotal() {
        console.log('Actualizando total...');
        document.getElementById('totalCompra').textContent = 'Total: $' + totalCompra;
    }

    function limpiarCampos(){
        document.getElementById('inputCosto').value = "";
        document.getElementById('inputCantidadC').value = "";
    }

    document.getElementById('btnAgregar').addEventListener('click', function () {
        // Obtener el id del producto
        var idProducto = document.getElementById('inputIdProducto').value;

        // Verificar si el id del producto ya ha sido agregado
        if (productosAgregados.has(idProducto)) {
            alert('El producto ya ha sido agregado.');
            return; // Salir de la función si el producto ya ha sido agregado
        } else if (idProducto == "") {
            alert("Debes seleccionar un producto para agregarlo");
            return
        }

        // Obtener los valores de los otros campos de texto
        var nombre = document.getElementById('inputNombre').value;
        var costo = parseFloat(document.getElementById('inputCosto').value);
        var cantidadDisponible = parseFloat(document.getElementById('inputCantidadD').value);
        var cantidadAComprar = parseFloat(document.getElementById('inputCantidadC').value);



        if (isNaN(costo)) {
            alert('Es necesario poner costo al producto')
            return
        } else if (costo < 1) {
            alert('El coste no puede ser menor a 1')
            return
        } else if (isNaN(cantidadAComprar)) {
            alert('Es necesario poner la cantidad comprada')
            return
        } else if (cantidadAComprar <= 0) {
            alert('La cantidad no puede ser menor a 0')
            return
        }
        else{
            // El producto no está en el array, puedes agregarlo
            // Crear un objeto de detalle
            var detalle = {
                IdProducto: idProducto,
                Nombre: nombre,
                Cantidad: cantidadComprada,
                Descripcion: null,
                Costo: costo,
                Estado: 1
            };
            $.ajax({
                type: "GET",
                url: "@Url.Action("AlmacenarDetalles", "Compras")", // Reemplaza con la URL de tu controlador
                contentType: "application/json; charset=utf-8",
                data: detalle,
                success: function (response) {
                    // Manejar la respuesta del servidor si es necesario
                    console.log(response.message);

                },
                error: function (error) {
                    console.error("Error al guardar detalles", error);
                }
            });
            // Limpiar los campos después de agregar el detalle
            limpiarCampos();
        }

        var subtotal = (costo * cantidadComprada).toFixed(2);
        totalCompra += parseFloat(subtotal);

        // Crear una nueva fila en la tabla
        var newRow = document.createElement('tr');
        newRow.dataset.id = idProducto; // Usar el id del producto como identificador
        newRow.classList.add('filaProducto');
        newRow.innerHTML = `
            <td>${idProducto}</td>
            <td>${nombre}</td>
            <td>${costo}</td>
            <td>${cantidadComprada}</td>
            <td>$${subtotal}</td>
            <td><button class="btn btn-danger">Eliminar</button></td>
        `;
        // Agregar la nueva fila a la tabla
        document.getElementById('productosAgregados').getElementsByTagName('tbody')[0].appendChild(newRow);

        // Agregar el id del producto al set de productos agregados
        productosAgregados.add(idProducto);
        actualizarTotal();

    });

    document.getElementById('productosAgregados').addEventListener('click', function (event) {
        if (event.target.classList.contains('btn-danger')) {
            // Obtener el id del producto a eliminar
            var idProductoEliminar = event.target.closest('tr').dataset.id;

            // Obtener el subtotal del producto a eliminar
            var subtotal = event.target.closest('tr').querySelector('td:nth-child(5)').textContent;
            subtotal = parseFloat(subtotal.replace('$', '').replace(',', '.')).toFixed(2); // Convertir el subtotal a decimal

            // Eliminar la fila de la tabla
            event.target.closest('tr').remove();

            $.ajax({
                type: "GET",
                url: "@Url.Action("EliminarDetalle", "Compras")", // Reemplaza con la URL de tu controlador
                contentType: "application/json; charset=utf-8",
                data: { id: idProductoEliminar },
                success: function (response) {
                    // Manejar la respuesta del servidor si es necesario
                    console.log(response.message);
                },
                error: function (error) {
                    console.error("Error al eliminar el detalle", error);
                }
            });

            // Eliminar el id del producto del set de productos agregados
            productosAgregados.delete(idProductoEliminar);

            totalCompra -= subtotal;
            actualizarTotal();
        }
    });


    /*Si se devuelve a la vista de detalles pueda ver los productos ya agregados */
    window.addEventListener('DOMContentLoaded', (event) => {
        var filas = document.querySelectorAll('#tablaProductos tbody tr');
        filas.forEach((fila) => {
            var idProducto = fila.dataset.id;
            var subtotal = parseFloat(fila.cells[4].textContent.replace('$', '').replace(',', '.')).toFixed(2);
            productosAgregados.add(idProducto);
            totalVenta += parseFloat(subtotal);
        });
        actualizarTotal();
    });
</script>